# 📑 総合整理：Engineer Guild Hackathon 2025年9月回

＝＝
# 目次
## 1. ハッカソンの基本情報
## 2. 「学び」の定義と課題
## 3. 市場分析（レッド／ブルーオーシャン）
## 4. 成功戦略
## 5. 回避すべき要件
## 6. 競合予測
## 7. 我々のブルーオーシャン戦略
## 8. Slackで判明した運営情報
## 総括

＝＝

---

# 1. ハッカソンの基本情報

## 🎯 テーマ

* **「テクノロジーで、“学び”の体験を変える」**

  * 「学び」は赤ちゃんの言葉習得から社会人リスキリング・シニアの挑戦まで含む、生涯学習全体を対象とする。
  * 背景には「リカレント教育」「リスキリング」の社会的要請がある。

---

## 📅 スケジュール

（公式タイムラインより）

* **予選開発期間**：9月6日(土)〜9月12日(金)
* **予選発表会**：9月13日(土) 13:00〜15:35（Zoom）

  * 各チーム7分発表、15チームが決勝進出
* **決勝開発期間**：9月14日(日)〜9月19日(金)
* **決勝発表会**：9月20日(土) 13:00〜17:30（六本木アークヒルズクラブ）

  * 各チーム15分発表
  * スポンサープレゼン（15:50〜16:50）
  * 結果発表・講評（17:30〜18:30）、優勝賞金100万円
  * 懇親会（18:30〜20:30）

---

## 🏆 評価基準（7項目）

出典：ハッカソン要項整理

1. **実用性**

   * 誰のどの「負（ペイン）」を、いつ・どこで・どう解決するか。
   * 社会的課題や4つの断絶（動機／接続／認識／応用）の解消に直結しているか。

2. **創造性**

   * 独自性、新規性のある発想か。
   * 既存手段とどう違うのかを比較で示すことが求められる。

3. **ユーザビリティ**

   * 初回5タップ以内で成功体験を提供できるか。
   * デモでは「1本の導線」で短時間に成果が見えることが重視される。

4. **技術的挑戦**

   * なぜその技術を選んだかを説明できるか。
   * 新しい技術や工夫への挑戦（例：RAGライト、Cloudflareスタック）を評価。

5. **将来性**

   * 中長期的なグロース構想（追加機能、KPI、収益化プラン）が描けるか。
   * 審査員やスポンサーが「自社事業に接続可能」と判断できるかが重要。

6. **完成度**

   * デモで安定動作するMVPであること。
   * 「壊れないデモ」「三段フォールバック」などの信頼性対策が求められる。

7. **プレゼンテーション**

   * プロダクトの魅力を効果的に伝える力。
   * スライド構成は審査項目順、デモURL＋90秒動画を必須。

---

## 🔑 審査の重み付け

* **予選（コンセプト勝負）**

  * アイデアの独自性、課題解決の質、技術選定の理由が中心。
* **決勝（完成度・UX勝負）**

  * 実際に動く品質、ユーザー体験、壊れないデモの安定性が重視される。

---

✅ まとめると、「テーマ＝学び全体を対象にした変革」「期間＝予選6日＋決勝6日」「評価＝7項目、予選はアイデア、決勝は完成度」という構造です。

---

＝＝

---

# 2. 「学び」の定義と課題

## 🎯 「学び」の定義

* **統合定義**：
  「“学び”の体験とは、人が一生を通じて“知らない自分”から“できる／なりたい自分”へと変容する全人的なプロセスであり、動機・接続・認識・応用といった断絶を乗り越えつつ、短い成功体験の積み重ね、社会的関わり、成果の可視化を通じて深化していく成長の旅である」

* **対象範囲**：

  * **時期**：乳幼児の言葉習得 → 学生の学習 → 社会人のリスキリング → シニアの挑戦まで
  * **場所**：学校・塾・会社研修・オンライン・日常生活の気づき
  * **背景**：リカレント教育やリスキリングが社会的に求められる時代

---

## 🧩 解決すべき「4つの断絶」

EGHでは「学び」が普遍的に直面する課題を **「4つの断絶」** と整理しています。

1. **動機の断絶**

   * 例：参考書を買ったが三日坊主／アプリを入れても続かない
   * 核心：始めたい気持ちはあるが継続できない

2. **接続の断絶**

   * 例：学習仲間が見つからない／教材やメンターに出会えない
   * 核心：学ぶ場や人とのつながりを得られない

3. **認識の断絶**

   * 例：努力しても成長を実感できない／成果が見えずモチベ低下
   * 核心：学びの進展や価値が可視化されない

4. **応用の断絶**

   * 例：資格を取っても実務で使えない／学んだ知識が活かせない
   * 核心：知識と実社会・実生活の接続が欠落

---

## ✨ 目指す「理想の学びの体験」

* **短い成功体験の積み重ね**：
  「発火（やろう）→実行→結果→振り返り→次へ」の低摩擦ループ。

* **物語的な学習ジャーニー**：
  「発見→没入→統合」の三幕構成で、学びにストーリー性を持たせる。

* **社会的関わりの中で深化**：
  仲間やメンターと学ぶ「社会構成主義」的体験が不可欠。

---

## ✅ まとめ

* EGHにおける「学び」とは、 **生涯にわたる全人的変容プロセス**。
* 課題は「4つの断絶」として体系化されており、これをどうテクノロジーで乗り越えるかが勝敗の核心。
* 理想の姿は **短期の成功体験 × 成果の可視化 × 社会的つながり × 実社会応用** の統合。

---

＝＝

---

# 3. 市場分析（レッド／ブルーオーシャン）

## 🔴 レッドオーシャン（競争が激しい／失敗事例の多い領域）

1. **B2B塾向け標準コンテンツ（スタディサプリ撤退）**

   * リクルート「スタディサプリ」塾向けサービスは2026年3月末に撤退を決定。
   * **原因**：

     * カスタマイズ性の欠如（各塾のニーズに対応できない）
     * 教師業務と競合する設計（チャネルコンフリクト）
     * ChatGPT Study Modeの登場などによる競争激化。
   * **示唆**：ワンサイズ・フィットオール型教材は現場に受け入れられにくい。

2. **GIGAスクール構想のインフラ不足と活用格差**

   * 「1人1台端末」は整備済みだが、**約8割の学校で推奨通信帯域を満たさない**。
   * 教員のICTリテラシー不足、研修機会の欠如。
   * 自治体・学校・家庭ごとに利用格差が発生し、デジタルデバイドを助長。

3. **B2C eラーニング市場の停滞**

   * コロナ禍の反動で縮小傾向。
   * 個人のモチベーション維持が困難で、継続率が低い。

4. **社会人リスキリング・自己啓発の低調**

   * 日本の社会人は「社外で何もしていない」割合が52.6%とAPAC最悪水準。
   * 個人の自己啓発実施率も14.9%に留まる。
   * 長時間労働や年功序列が意識変革を遅らせ、教育予算制約もあり。

---

## 🔵 ブルーオーシャン（成長余地が大きい／新規性の高い領域）

1. **AIによる個別最適化＋教員支援（B2B2Cモデル）**

   * atama+の成功例：AIが生徒ごとに最適カリキュラムを自動生成、講師は高付加価値な指導に専念。
   * 文科省も外国ルーツ児童向け日本語教育に生成AIを導入予定。
   * **トレンド**：学習オーケストレーション（教材提示だけでなく、学習プロセス全体を最適化）。

2. **校務DXと統合プラットフォーム**

   * Classiのように学習支援と校務システムを統合し「学校運営のOS」となるモデル。
   * 保護者連絡・お便り配信などを含め、学校全体を巻き込んだDXは継続成長が期待される。

3. **非認知能力の育成・評価**

   * 協調性・やり抜く力・創造性など、点数化できない能力をAIで可視化する市場が拡大。
   * IGS「Ai GROW」などが既に事例を作り、成長余地が大きい。

4. **「4つの断絶」を解消する学習体験設計**

   * **動機**：短い成功体験を積み重ねるUX
   * **接続**：教材・仲間との出会いを支援
   * **認識**：努力や成果を即時に可視化
   * **応用**：実社会で使えるスキル移転
   * ハッカソンの核心課題と直結し、新しいブルーオーシャン戦略の基盤。

---

## ✅ まとめ

* **レッドオーシャン**は「コンテンツ標準化」「インフラ依存」「自習B2C単体」「社会人の消極性」といった構造的に難しい領域。
* **ブルーオーシャン**は「AIを活かした個別最適化」「学校運営DX」「非認知能力の評価」「4つの断絶の解消」といった、テクノロジーで初めて実現可能な体験設計にある。

---

＝＝

---

# 4. 成功戦略

## 🎭 「偽エンジニア」戦略

* **概要**：非エンジニアであることを前提に、実装の大部分をAIに委任し、人間は戦略立案と指揮（オーケストレーション）に集中する方式。
* **根拠**：

  * EGHは短期間（予選6日＋決勝6日）で「動くMVP＋完成度」を競うため、AIによる高速開発が必須。
  * 「AI依存型開発」そのものが評価基準の**技術的挑戦**を満たす。
  * 成果物としての「AIでなければ解決できない価値」を示すことで、**真贋の観点**（AIありきでなく、AI必然性を示す）をクリアできる。

---

## 🎼 AIオーケストレーション

* **役割分担（想定オーケストラ）**

  * **ChatGPT**：統括／戦略設計・統合思考
  * **Claude Code**：初稿生成（コード・設計案）
  * **Codex CLI**：コード最適化・リファクタリング
  * **Gemini CLI**：テスト・実装検証
* **強み**：

  1. **スピード**：並列で役割分担することで、アイデア出しから動作コードまで短時間で到達。
  2. **完成度**：複数AIによる相互チェックで品質を担保。
  3. **演出性**：「人間が指揮するAIチーム」という構図自体が、プレゼンでのストーリー性を強化。

---

## 🖥️ GitHub運用（評価対象としての「チーム性」演出）

* **権限**：

  * Member権限で十分にPR・コミット可能。
* **複数人協働の証跡**：

  * GitHub上には**複数人が開発している痕跡**を残す。
* **コミット運用**：

  * **小分けコミット＋prefixルール**（例：`feat:` `fix:` `docs:`）。
  * 主要機能は必ずPRを経由し、**レビュー痕跡**を残す。
  * READMEには必須項目（デモURL／手順／アーキ図／挑戦ポイント／将来KPI）を記載。

---

## 🎯 プレゼンテーション戦略との連動

* **評価シートを“自然に埋める”構成**：スライドは審査基準7項目順に設計。
* **デモ演出**：

  * Vercel自動デプロイで即アクセス可能なデモURL。
  * 90秒動画を常備し、ネットワーク不安定でも確実にプレゼン可能。
* **GitHubを活用した信頼感演出**：

  * 「複数人協働」「透明性」「再現性」が審査員への安心材料となる。

---

## ✅ まとめ

成功戦略の核は、

* **AI依存型開発（偽エンジニア戦略）でスピードと完成度を両立**
* **AIを役割分担して指揮するオーケストレーション能力**
* **GitHub運用を通じた「協働証跡」演出とリスク管理**
* **プレゼンまで含めた評価基準直結の設計**

これらを貫くことで、非エンジニアであっても競合チームを上回る「勝ち筋」が形成されます。

---

＝＝

---

# 5. 回避すべき要件

## 🚫 1. ワンサイズ・フィットオール型学習プラットフォーム

* **典型例**：動画教材や問題集を全員に同じ形で提供する仕組み。
* **失敗事例**：リクルート「スタディサプリ」塾向けサービス（2026年撤退）

  * 塾ごとの多様なニーズに応えられず現場に不適合。
  * 利益相反で既存の教育者から反発。
* **評価への悪影響**：

  * **創造性**：既存サービスとの差別化ゼロ。
  * **実用性**：現場で「役立たない」と判断される。

---

## 🚫 2. 多機能すぎる設計

* **典型例**：進捗管理＋SNS＋教材＋ノート＋可視化など「全部入り」。
* **問題点**：

  * 予選発表は **7分**、機能が多いと説明破綻する。
  * 開発6日間では完成度が低く、中途半端になる。
* **評価への悪影響**：

  * **完成度**：未完成・バグ多発で減点。
  * **プレゼン**：伝えたい価値がぼやける。

---

## 🚫 3. 教師を完全に代替するAI

* **典型例**：「AI講師が授業を全て行う」モデル。
* **問題点**：

  * 教育現場の反発を招く。
  * 成功しているのは **支援型モデル（atama+、Classi）** で、代替型は市場に馴染まない。
* **評価への悪影響**：

  * **実用性**：導入ハードルが高く現実離れ。
  * **将来性**：持続的スケールが困難。

---

## 🚫 4. 不安定なVR／専用ハード依存

* **典型例**：VRゴーグル前提の授業、IoTデバイス依存の学習。
* **問題点**：

  * 日本の学校の**約8割は通信帯域不足**、同時接続が不安定。
  * ハードがないと体験できず、デモで失敗リスクが高い。
* **評価への悪影響**：

  * **完成度**：デモ中断＝致命的減点。
  * **実用性**：現場環境と乖離。

---

## 🚫 5. 「AIを使っている」こと自体が目的の設計

* **典型例**：「生成AIで要約してみました」だけの仕組み。
* **問題点**：

  * 「なぜAIでなければならないか」を説明できないと逆効果。
  * 技術利用を目的化すると、\*\*評価基準（技術的挑戦）\*\*において減点。
* **評価への悪影響**：

  * **技術的挑戦**：必然性がないと「無駄な技術」と判断される。
  * **創造性**：既存機能の焼き直しに見える。

---

# ✅ 総合指針

* **「誰のどの“負”をどう解消するか」に直結しない要件は採用しない**。
* \*\*「大きく見せる」より「確実に動く一点突破」\*\*を優先。
* **市場の失敗事例・インフラ制約・現場文化**を無視した設計は必ず評価を落とす。

---

＝＝

---

# 6. 競合予測

## 🎯 基本予測

* 他チームの多くは、テーマ「テクノロジーで“学び”の体験を変える」に沿い、**「4つの断絶」**（動機／接続／認識／応用）の解消を狙ったプロダクトを作る。
* 特に **動機の断絶（モチベ維持）** と **認識の断絶（成果の可視化）** が中心テーマになると予測される。

---

## 🏗️ 技術スタックの傾向

### 1. **標準レベル（多数派）**

* **Next.js＋Supabase** を採用し、Auth／DB／Storage／Realtime／pgvectorを組み合わせて最短でMVP構築。
* AI APIを直接呼び出して、最低限動くWebアプリを短期間で完成させる。

### 2. **中堅層**

* UI/UXを整え、\*\*RAGライト（小規模なembedding検索＋生成）\*\*を導入。
* 学習ログを基にスキルマップやグラフを生成し、**努力の可視化**を実装。
* デモで「説得力のあるEdTechアプリ」を見せるレベル。

### 3. **上位層**

* **Cloudflare Pages／Workers／D1＋CRDT** による**体感速度ゼロ／オフライン対応**を実装。
* \*\*Neon（Postgres＋pgvector）＋イベント駆動（Inngest等）\*\*で、再現性とデータ説明責任を強化。
* **三段フォールバック**（通常応答→キャッシュ／テンプレ→デモ用ユーザー）で「壊れないデモ」を保証。
* **Slope指標**（正答率前日比 ÷ 学習時間）など独自KPIで「努力→成果」を数値で説明。
* プレゼンでは「VC（学習証明）」「非認知能力評価」といった未来性を提示し、審査員に強くアピール。

---

## 🤖 AI実装の水準

* **RAGライトが標準化**：

  * 教材カードをembedding化しpgvector検索＋生成で「根拠付き回答」を提示。
  * **説明可能性**：スキルID＋3行理由を返し、「なぜこの課題か」を審査で明示できる。
* **二段モデル**：安価モデルで分類・タグ付け、高性能モデルで計画生成。コストと速度を最適化。
* **LLMプロキシ（OpenRouter／LiteLLM）**：複数モデル切替で障害リスクを回避。

---

## 🔍 競合チームのレベル感

1. **下位層**

   * 最低限動くWebアプリ。UXや教育的深みが薄く、差別化ができない。

2. **中堅層**

   * UI/UXが整理され、成果可視化やRAGを搭載。説得力はあるが技術的に平凡。

3. **トップ層**

   * CloudflareやCRDTで圧倒的なUXスピード。
   * RAGライトに説明可能性を組み込み、Slope指標で「成果を数値で証明」。
   * 三段フォールバックで**壊れないデモ**を実現。
   * プレゼンで将来性（VC・非認知評価）まで語り、審査員を納得させる。

---

## ✅ まとめ

* **多数派**：Supabaseベースの「最低限動くMVP」。
* **中堅**：RAG＋成果可視化を組み込み、説得力を高める。
* **上位層**：Cloudflareスタック、Slope指標、三段フォールバックまで備えた「完成度の高いEdTechアプリ」。

👉 我々が勝つためには、この「上位層の水準」を前提に、さらに差別化要素（例：**即時可視化・非認知能力指標・壊れないデモ体制**）を組み込む必要があります。

---

＝＝

---

# 7. 我々のブルーオーシャン戦略

## 🌊 コア戦略

* **一言サマリ**：
  **「今日の1分 × 伴走AI × 即時可視化」**
  → 学習者が30秒で“できた！”を実感し、非認知能力までも可視化する一点突破の体験設計。

* **狙い**：

  * 競合が取り組む「学習ログの可視化」「教材推薦」を超え、\*\*“最小の行動で最大の達成感”\*\*を生む。
  * 「レッドオーシャン＝教材置き場」「重機能アプリ」とは異なる領域に立つ。

---

## 🎯 体験要件（UXのブルーオーシャン化）

1. **初回5タップ以内で開始**

   * サインアップ不要（ゲストOK）
   * 「はじめる」→「今日の1分」表示→タスク実行→即結果。

2. **30秒で可視化**

   * 実行直後に「進捗バー」＋「今日の一歩バッジ」を即表示。
   * 「次の1分」ボタンで摩擦ゼロの周回。

3. **協働の最小単位**

   * 1分ボイス要約→AIが1文に整形→仲間に共有→「イイネ／挑戦」1タップ循環。

4. **応用の断絶への橋渡し**

   * 英語ロールプレイ（買い物1分）、資料作成ミニタスク（図表清書）など「即使える1分応用タスク」を用意。

---

## 📊 データ・指標要件（成果の可視化）

* **学力系**：正答率、理解度、連続日数
* **非認知系**（ブルーオーシャン領域）：

  * 継続力：連続日数、週内達成数
  * 協調性：助けた／助けられた回数、リアクション数
  * 挑戦性：再挑戦数、新分野着手数
* **ダッシュボード**：週間伸びグラフ、非認知バッジ棚

---

## 🤖 AI要件（必然性を限定して示す）

* **今日の1分レコメンド**：誤答パターンや学習履歴から「次の1分」を自動提案。
* **1分ボイス要約**：音声アウトプットを即座に1行要約＋励まし文生成。
* **兆候検出**：中断傾向や時間超過から「つまずきサイン」を可視化。

👉 **AIはこの3点に限定**し、教材自動生成や重い自動採点など「時間が溶ける要素」は切る。

---

## 🛠️ 予選MVP構成

* **API（最小3本）**

  1. `GET /today` → 今日の1分カード
  2. `POST /submit` → 結果登録（正誤／時間）
  3. `GET /dashboard` → 進捗・非認知バッジ

* **画面（3画面構成）**

  * ホーム：今日の1分・継続日数・次の一歩
  * 実行：問題／タスク＋タイマー
  * ダッシュボード：進捗グラフ・非認知バッジ

* **デモ対策**

  * Vercelに即デプロイ → デモURLを安定確保。
  * **90秒動画バックアップ**を常備（オフラインでも再現可能）。

---

## 📈 KPI例（審査で示す数値）

* 初回体験：起動→結果表示が30秒以内で90%以上
* 翌日継続率：30%（MVP指標として十分）
* 非認知バッジ：継続力★1獲得率40%、協力行動1回/人

---

## ✅ まとめ

我々のブルーオーシャン戦略は、

* **短期成功体験（30秒で“できた！”）**
* **非認知能力の即時可視化**
* **AIを3機能に限定し必然性を証明**
* **壊れない予選MVP（3API・3画面・デモURL＋動画）**

これにより、競合の「教材配信型」「成果可視化型」を超え、**“続けられる・見える・応用できる”学習体験**を一点突破で提示する。

---

＝＝

---

# 8. Slackで判明した運営情報

## 🧩 1. 追加インストール済み GitHub Apps

* **Google Integrations**

  * GitHubとGoogleサービス（Drive, Sheets, Calendar等）の連携を可能にする。
  * 提出物管理やデータ可視化に利用可能。

* **Koyeb**

  * 軽量PaaS（Platform as a Service）。APIやバックエンドの即時デプロイに適する。
  * **特徴**：

    * 短時間でWeb APIを立ち上げられる
    * 無料枠あり、スケールも容易
  * 予選MVPで必要な `/today` `/submit` `/dashboard` のAPIホスティングに有効。

* **Vercel**

  * Next.jsフロントエンドを自動デプロイする標準環境。
  * **強み**：デモURL即発行、安定したデモ運用。
  * GitHubプッシュと同時にPreview環境を生成でき、**デモ失敗リスクを最小化**。

👉 注意点：
運営がこれらを導入したのは「強制的に使わせる」ためではなく、**短期間で安定したデモを保証するための“推奨インフラ”**。
特定技術に固執せず、必要に応じてSupabaseやNeonなどを選んでもよい。

---

## 🔑 2. 全リポジトリに Admin 権限付与

* 運営がチーム全員に **Admin権限** を付与済み。
* できること：

  * Branch Protection ルール設定
  * GitHub Actions を用いた CI/CD（Lint, TypeCheck, デプロイ自動化）
  * Secrets管理（APIキーの安全な保管）
* つまり「本番環境並みのDevOps」を実行可能。
* 我々にとっては **「壊れないデモ」保証のための観測体制（Sentry, Langfuse, PostHog）** をGitHub経由で仕込める点が重要。

---

## 🔄 3. 追加要求が可能

* 運営に申請すれば、**外部サービスや追加リポジトリの利用が可能**。
* 例：

  * **Supabase**（DB＋Auth＋pgvector）：最短でMVPを構築
  * **Grafana／Datadog**：可視化・監視の拡張
  * **その他CI/CD系**：開発フロー安定化
* この柔軟性により、各チームが「自分たちの強みを補完する技術」を選べる。

---

## 🧭 4. 運営の意図

* **標準環境＋柔軟拡張**を保証する仕組み。
* 意味するところ：

  * 全チームが最低限「壊れないデモ環境」を確保できる（Vercel＋Koyeb）。
  * しかし差別化は「外部連携・技術選定・体験設計」で勝負すべきというメッセージ。

---

## ✅ まとめ

Slack判明情報から得られる示唆は以下の通り：

1. **標準環境（Vercel＋Koyeb＋Google連携）で安全なMVP実装が可能**。
2. **Admin権限によりCI/CD・Secrets管理・観測体制を整備できる**。
3. **追加要求で拡張性を得られる（SupabaseやGrafanaなど）**。
4. 運営の狙いは「公平性の確保」と「差別化ポイントを体験設計に集中させること」。

---

＝＝

---

# ✅ 総括

## 1. 勝利の本質

Engineer Guild Hackathon 2025年9月回で勝ち筋となるのは、\*\*「限られた時間で確実に動くプロダクトを仕上げ、かつ評価基準をすべて満たすこと」\*\*です。
そのために、以下の4要素が核となります。

---

## 2. 「4つの断絶」への的確なアプローチ

* **動機の断絶**：短い成功体験（30秒で“できた！”）を設計。
* **接続の断絶**：協働要素（1分ボイス要約の共有、仲間からのフィードバック）で最小限のつながりを提供。
* **認識の断絶**：努力や成果を「進捗バー」「非認知バッジ」「Slope指標」で即時可視化。
* **応用の断絶**：1分ロールプレイや軽量実践タスクで「学んだことを社会で使える」実感を与える。

👉 他チームも断絶の解消を狙うが、我々は「30秒で成果」「非認知能力の可視化」という差別化軸を持つ。

---

## 3. 非エンジニア×AIのスピード＆完成度戦略

* **偽エンジニア戦略**：人は上流設計と指揮、AI（ChatGPT／Claude／Codex／Gemini）が実装。
* **GitHub運用**：コミット小分け・PR痕跡・複数人協働演出で「信頼できるチーム」と示す。
* **開発の質より速度優先**：まず動くものを仕上げ、完成度を確保。その後に差別化機能を追加。

👉 **エンジニアリング力で競わない**。AIを徹底活用することで短期間でも「完成度の高いMVP」を実現。

---

## 4. ブルーオーシャン戦略

* \*\*「今日の1分 × 伴走AI × 即時可視化」\*\*を核とする一点突破。
* **非認知能力の可視化**（継続力・協調性・挑戦性）は、既存EdTechが対応しきれていない領域。
* **予選MVP構成**：

  * API：`/today` `/submit` `/dashboard` の3本
  * 画面：ホーム／実行／ダッシュボード
  * デモURL＋90秒バックアップ動画

👉 競合が教材配信や成果可視化に集中する中、\*\*「非認知能力」＋「即時体験」\*\*で差別化。

---

## 5. 壊れないデモ設計

* **運営標準環境**：Vercel（フロント）＋Koyeb（バック）＋Google Integrations。
* **三段フォールバック**：通常応答 → キャッシュ／テンプレ → デモ用ユーザー。
* **バックアップ動画**：必ず用意し、オフラインでも発表可能。
* **観測体制**：Sentry・Langfuse・PostHogで「壊れない証拠」をデータで提示。

👉 デモ失敗は即減点。安定性の演出は勝敗を大きく左右する。

---

## 6. 最終方程式

**勝利の方程式**＝
**「4つの断絶の解消」 × 「AIによるスピードと完成度」 × 「ブルーオーシャン差別化」 × 「壊れないデモ」**

これを審査基準（実用性／創造性／ユーザビリティ／技術的挑戦／将来性／完成度／プレゼン）に直結させることで、**予選突破と優勝の両立**が可能となる。

---

＝＝
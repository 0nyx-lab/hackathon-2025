# 📑 Engineer Guild Hackathon 2025.9

## プロジェクト前提ドキュメント（統合版）

---

## 1. ユーザー特性

* **非エンジニア**（Chrome拡張開発経験・ucomm開発途中あり）
* **AI依存型開発スタイル**：2022年12月からChatGPTを中心に活用
* **目的意識**：

  * エンジニア志望の学生層を相手に「AIを軸にした現代の戦い方」を示す
  * 非エンジニアでも優勝可能であることを実証する

---

## 2. チーム情報

* **メンバー**：自分（兄）＋妹、の2名構成。
* **GitHubアカウント**：

  * 自分のアカウントをセットしたPC → Cursor、ClaudeCode、Codex、Gemini CLI導入済み。
  * 妹のアカウントをセットしたPC → 同様にCursor、ClaudeCode、Codex、Gemini CLI導入済み。
* **複数PC運用**：

  * **複数PCからアクセスするが、成果物は1つのGitHubリポジトリに集約**
  * 各PCが同一リポジトリをPull/Pushし、AI主体での開発作業を同時並行進行

---

## 3. AI／エージェント環境（武器一覧）

### 汎用アシスタント

* ChatGPT（Plus）
* Claude（Pro）
* Gemini（Pro）
* Perplexity（Pro）

### CLI系

* Codex CLI
* Claude Code
* Gemini CLI
* GitHub CLI (gh)
* ucomm（未完成／戦力外）

### GUI/Editor系

* Cursor、VS Code 等（AI指示下で補助的利用）

---

## 4. 利用デバイス

* **Windowsラップトップ**（汎用用途・広い互換性）
* **Macbook**（AI開発・デモプレゼンに安定）
* **ミニPC**（検証用サーバ・バックアップ環境）
* **複数台稼働**：全デバイスから同一GitHubリポジトリにアクセス

---

## 5. GitHub運用方針

* **最初からGitHub基盤で進行**
* **CLI主体運用**（gh / 各AI CLIで操作）
* **AI役割分担**：（重複や入れ替わりを許容）

  * Claude Code：初稿コード生成
  * Codex CLI：リファクタリング・最適化
  * Gemini CLI：実行環境テスト・代替案提案
  * ChatGPT：全体統括・進行管理

---

## 6. 開発プロセス（AIDD適用）

### PDCA高速回転

1. **Plan**：Issueに要件・テスト条件を記載
2. **Do**：AIごとにブランチを切り作業 → PR作成
3. **Check**：相互レビュー（AI同士・ユーザー確認）、CIで動作確認
4. **Act**：ルール改善・README更新・学びをWiki化

### AIDDの4本柱

1. RuleOps：失敗や学びを`.rules.md`に蓄積
2. Issue駆動：作業単位をIssueで可視化
3. Docsファースト：公式Docs参照を必須化
4. MCP拡張：外部API・検索を必要に応じ導入

---

## 7. 成果物逆算（過去事例から）

* **評価基準（共通5軸）**：実用性・創造性・ユーザビリティ・完成度・プレゼンテーション
* **成果物の形態**：スマホアプリ／Webアプリ中心（ごく一部デバイス連携）
* **傾向**：

  * シンプルかつユニークなコア機能
  * APIファースト（翻訳API・マップAPI等）
  * MVP＋αの完成度を求められる

---

## 8. 心構え

* **「偽エンジニア」戦略**：非エンジニアでもAIを駆使して成果を出す
* **チーム性演出**：複数アカウント／複数PC運用で協働性を可視化
* **スピード勝負**：課題発表直後にAI議論を開始し、MVPを即構築

---

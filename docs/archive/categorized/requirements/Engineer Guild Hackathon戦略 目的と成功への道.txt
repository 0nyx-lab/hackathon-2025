Engineer Guild Hackathonの目的と成功基準、そしてそのための開発・運用戦略について、ソースに基づきご説明します。

---

### ハッカソンの目的と成功基準

Engineer Guild Hackathonの主な目的は、参加者が**プロダクト開発を通じてチームでの協力や問題解決能力を向上させる**ことです。また、技術的なスキルだけでなく、**アイデアを形にする力やプレゼンテーション力を養う**ことも目指しています。参加者には、ハッカソンで作ったものを外資就活ドットコムのプロフィール「開発経験Engineer Guild Hackathonの目的と成功基準、そしてそのための開発・運用戦略について、ソースに基づきご説明します。

---

### ハッカソンの目的と成功基準

Engineer Guild Hackathonの主な目的は、参加者が**プロダクト開発を通じてチームでの協力や問題解決能力を向上させる**ことです。また、技術的なスキルだけでなく、**アイデアを形にする力やプレゼンテーション力を養う**ことも目指しています。参加者には、ハッカソンで作ったものを外資就活ドットコムのプロフィール「開発経験」欄に記入し、企業からのスカウトに繋げることも推奨されています。何よりも大切なのは楽しむことであり、優勝と賞金100万円を目指して頑張ることが呼びかけられています。

今回のハッカソンのテーマは「**テクノロジーで、『学び』の体験を変える**」です。このテーマの背景には、赤ちゃんの言葉習得から、小中高・大学での学習、社会人のスキル習得、シニアの挑戦まで、**一生涯を通じて「学び」が続く**という考えがあり、リカレント教育やリスキリングが求められる時代であることが挙げられます。

「学び」の体験において解決すべき主要な課題としては、以下の**4つの「断絶」**が認識されており、これらの解消を目指すプロダクトが高く評価される鍵となります:
1.  **動機の断絶**：学び始めたいという意欲があっても、継続が難しい。
2.  **接続の断絶**：学びたい内容や、適切な教材、あるいは共に学ぶ仲間に出会えない。
3.  **認識の断絶**：学習活動を行っても、その努力や成果が目に見えにくい。
4.  **応用の断絶**：知識やスキルを獲得しても、それを実社会や実際の業務で活かせない。

**成功基準（評価項目）**としては、以下の**7つの項目**がハッカソン全体で設けられています:
1.  **実用性**：提案されたプロダクトが実際にユーザーに役立つかどうか。予選では「誰のどの『負』を、いつ・どこで・どう改善するか」を明確にし、ペルソナと「負」を3点以内に圧縮して具体的に示すことが重要です。
2.  **創造性**：アウトプットに独創的なアイデアや新しいアプローチがどれだけ反映されているか。既存手段との比較表で新規性を示すことや、組み合わせによる新規性も有効です。
3.  **ユーザビリティ**：ユーザーが直感的に使えるデザインと機能性を持っているか。初回5タップ以内で成功体験を提供し、空の状態でも映えるサンプルデータを準備すること、デモ導線を1本に限定するなどの工夫が求められます。
4.  **技術的挑戦**：プロダクト開発において使用した技術が適切に選定されているか、また、新しい技術や手法に挑戦しているか。「なぜこのAPI/DB/モデルか」を言語化し、チャレンジポイントを3点以内に明示することが効果的です。
5.  **将来性**：プロダクトの価値をさらに高める中長期的なグロース構想（追加機能、収益性など）をどこまで描けているか。「直後（+2週間）」「短期（+3か月）」「中期（+6～12か月）」のロードマップとKPI目標を添えることが推奨されます。
6.  **完成度**：提案されたプロダクトの完成度や動作するプロトタイプの品質。デモで落ちずに安定動作し、MVPとして機能することが重視されます。
7.  **プレゼンテーション**：チームのプレゼンテーションが、プロダクトの魅力や価値をしっかりと伝えられているかどうか。「課題 → 解法 → 動くデモ → 将来展望」という直線的なストーリーで構成し、バックアップデモを用意することが有効です。

予選では特に「**アイデア・技術選定（コンセプト勝負）**」が、決勝では「**完成度・UX（動作品質と体験重視）**」が重視されます。また、審査員は「企画の質／“ユーザーの負”の解像度／技術選定の妥当性」を重視する傾向があります。

---

### 効果的な開発・運用戦略

このハッカソンでは、「**非エンジニアでもAIを駆使して成果を出す**」という明確な「偽エンジニア」戦略が据えられています。

**1. 開発戦略の前提**
*   **AI依存型開発スタイル**：2022年12月以降、ChatGPTを中心にAIを活用する開発スタイルを前提とし、開発の大部分をAIに委ねます。
*   **スピード勝負**：課題発表直後にAI議論を開始し、最短でMVP（実用最小限の製品）を構築することを目指します。
*   **AIツールの活用と役割分担**：ChatGPT、Claude、Gemini、Perplexityといった汎用アシスタントに加え、Codex CLI、Claude Code、Gemini CLIといったCLI系のAIツールを導入済みで、これらをGitHub CLI (gh)と連携させ、開発プロセスで役割分担して活用します。具体的には、Claude Codeは初稿コード生成、Codex CLIはリファクタリング・最適化、Gemini CLIは実行環境テスト・代替案提案、ChatGPTは全体統括・進行管理を担当します。
*   **GitHub基盤での開発**：最初からGitHubを唯一のコードの拠点とし、CLI主体（gh / 各AI CLI）で運用します。

**2. チーム性演出**
*   「自分（兄）＋妹」の2名構成です。
*   コミットが特定の一人に偏らないようにする、主要なPull Request（PR）に複数メンバーが関与する、発表を担当機能ごとに交代で説明するといった工夫で、チームでの協力を可視化することが重視されます。

**3. GitHub運用と高評価のポイント**
GitHubリポジトリ全体が評価対象となり、以下の点が重視されます:
*   **ソースコードそのもの**。
*   **コミットログ**：継続的に作業したか、誰がどの部分を担当したかが分かるようにします。機能単位で小分けにし、メッセージは「type: 要約（なぜ/何を/どう）」というprefixルールを統一することが推奨されます。
*   **README.mdの強化**：デモURL・説明の分かりやすさ、初回起動手順（.env例、npm install && npm startなど）、テスト用アカウント、アーキテクチャ図とその選定理由（短文）、挑戦3点、将来KPIなどを明記します。
*   **完成度と独自性**：動くものがあるか、工夫した点は何か。
*   **PR運用**：主要機能は`feature/*`ブランチを切ってPRを作成し、mainブランチにマージするフローを推奨します。レビューは必要箇所だけにコメントします。
*   **リスク管理**：mainブランチが破損するリスクに備え、発表用に`release/予選`のようなタグを打った固定URLをスライドに記載します。

**4. デモンストレーションとプレゼンテーション戦略**
プレゼンテーションはプロダクトの魅力と価値を伝える上で非常に重要です。
*   **デモURL提出が最優**：審査員が実際に触れられる「動く実物」が最も高評価です。
*   **動画の二重化**：当日不調（ネットワーク/API障害など）に備え、90秒程度の成功導線を録画した動画（音声説明入り）を用意し、スライドに切り替え手順を明記します。
*   **デモの構成**：
    *   デモ導線は「**30秒で成果が見える1ルート**」に固定し、クリック数を削減します。
    *   開始30秒で「負→解決→ボタン押下→結果」が見える構成が効果的です。
    *   初回5タップ以内で成功体験を提供できるよう、空の状態でも映えるサンプルデータを準備します。
    *   確認用の固定テストユーザーを準備します。
*   **プレゼンテーションスライド設計の型（7分発表）**：
    1.  **タイトル＆タグライン**（0:30）：誰のどの負をどう変えるか。
    2.  **負の解像度**（1:00）：想定ユーザーのペルソナ（固有名・属性・環境を記載）と、そのペルソナが抱える「負」（定量＋定性）を明確に示します。
    3.  **解決コンセプト**（1:00）：差別化3点を提示。
    4.  **デモ成功導線**（2:00）：URLと動画バックアップで実際に動く様子を見せます。
    5.  **技術選定の妥当性＆挑戦3点**（1:00）：限られた時間で最短で価値を出す構成（なぜこのAPI/DB/モデルか）を言語化し、トレードオフ表を作成します。技術的挑戦は「必須1＋差別化1＋遊び心1」で3点に絞ります。
    6.  **将来性**（1:00）：直後（+2週間）、短期（+3か月）、中期（+6～12か月）のロードマップとKPI目標（数値レンジを設定）を示します。
    7.  **まとめ**（0:30）：採点5項目に対応する「主張一句」を並べて締めくくります。
*   **時間管理**：練習時に「6:30で終了」する仕様とし、質疑や詰まりを吸収できるようにします。タイムキーパー役を決めます。
*   **リスク管理**：ネットワーク障害時は動画に切り替えるリハーサルを済ませておくこと、APIが落ちた場合にモックデータを返すエンドポイントを用意すること、発表者不在時の代行文をREADMEに書き込むことなどが推奨されています。
*   **SNS発信**：予選前に#EGHをつけて開発中のスクリーンショットなどを1回発信し、運営や審査員に覚えてもらいやすくします。

これらの戦略は、Engineer Guild Hackathonで「成果を出す」ための具体的なロードマップと位置付けられます。
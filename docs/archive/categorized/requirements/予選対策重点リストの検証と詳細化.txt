# 🔍 予選対策重点リストの検証と詳細化

## 1. 審査基準との照合（1〜5項目に完全対応しているか）

* **実用性**：ペルソナ定義／“負”の解像度／デモで即時解決 → OK
* **創造性**：既存比較表／組み合わせによる新規性提示 → OK
* **ユーザビリティ**：5タップ以内の導線／サンプルデータ → OK
* **技術的挑戦**：API/DB選定理由3行／挑戦3点 → OK
* **将来性**：+2週/+3か月/+半年ロードマップ＋KPI → OK

👉 全項目が明示的に盛り込まれており、審査員が採点時に「空欄なし」状態を実現。

---

## 2. チーム体制との整合性

* 兄：全体ディレクション、実装実務（AI活用）、プレゼン主担当。
* 妹：GitHub上で「関与痕跡」を残す（PR/Issue）、発表時に一部担当。
* AI群：コード生成・改善・テストを補助。

👉 「非エンジニア実務＋技術実装をAIで補完」という構造をGitHub運用に反映できる。

---

## 3. 実務オペレーションの粒度不足箇所 → 詳細化

以下の部分を具体化しました。

### A. ペルソナと課題

* [ ] ペルソナは**固有名・属性・環境**を記載（例：名前／学年・社会人n年目／津樂通勤時間／勉強中のもの）。
* [ ] “負”は**定量＋定性**で提示。
* [ ] 比較表は**横軸＝項目／縦軸＝既存・今回**で作成。

### B. デモ構築

* [ ] **URL確認用の固定テストユーザー**を準備。
* [ ] サンプルデータを事前投入（空状態だと見栄えがしない）。
* [ ] 動画は「操作手順をカーソル付きで録画」「冒頭にタイトルテロップ」。
* [ ] デモ導線は**30秒で成果が見える1ルート**だけに固定。

### C. 技術実装

* [ ] API選定理由は「速度・精度・実装容易性」の**トレードオフ表**を作成。
* [ ] 技術的挑戦は「必須1＋差別化1＋遊び心1」で3点に絞る。
* [ ] 将来性はKPIに**数値レンジ**を設定（例：Day7継続率30%→40〜45%）。

### D. GitHub運用

* [ ] コミットメッセージは**prefixルール**を統一（feat/fix/docs/refactor）。
* [ ] 妹アカウントで最低3件以上のPRを出す（README更新／UI修正／小機能追加）。
* [ ] READMEに「最小限の一行起動手順（npm install && npm start）」を必ず記載。
* [ ] main壊れリスクに備え、発表用に`release/予選`ブランチを確保。

### E. プレゼン

* [ ] スライドは**審査5項目を順に並べた構成**にする（審査員が迷わない）。
* [ ] タイムキーパー役を決めて「6:30で終了」の練習を必須化。
* [ ] 妹アカウントが担当するパートを「GitHubでの役割」「UI改善点」に限定。

### F. リスク管理

* [ ] **ネットワーク障害シナリオ**をリハ済みにする（Wi-Fi遮断→動画切替）。
* [ ] APIが落ちた場合に**モックデータを返すエンドポイント**を用意。
* [ ] 発表者不在時の代行文をREADMEに書き込む（例：「本来は兄が担当ですが〜」）。

---

## 4. 抜けていた観点

* **SNS発信**：#EGHをつけて予選前に「開発中スクショ」を1回発信 → 運営や審査員に覚えてもらいやすい。
* **審査員視点での採点表シミュレーション**：

  * 事前に審査表を自作 → スライド各ページがどの項目に対応するかマッピング。
* **協力アピール**：発表で「この機能はチームメンバーが〜」と一言入れる。

---

# ✅ 詳細化後の重点ポイントまとめ

1. **ペルソナと負**を具体名・定量・比較表で提示。
2. **デモはURL＋動画二重化**、30秒で効果が見える1導線。
3. **技術選定は表形式**、挑戦は3点に絞る。
4. **GitHubは協働痕跡**を演出。
5. **スライド＝審査5項目の順番**で構成。
6. **リスクシナリオをリハーサル済み**にする。
7. **SNS発信・協力アピール**で印象補強。
---



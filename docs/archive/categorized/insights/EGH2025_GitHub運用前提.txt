# 📑 プロジェクト前提：GitHub運用方針

## 1. アカウントと組織の状況

* 本ハッカソンにおいて、**運営側（Engineer-Guild-Hackathon Org）** から各チームに公式 GitHub Organization が付与されている。
* チーム 24 に割り当てられた Organization 内に、**専用の Private リポジトリがすでに存在**している。
* メンバー構成：

  * チーム参加者（0nyx-lab / lap1s-lab）
  * 運営アカウント（審査・管理目的で参加）

---

## 2. 権限とロール

* GitHub Org のロールは大きく以下の3種：

  * **Owner**：公開設定、メンバー管理、リポジトリ削除/移譲、外部サービス連携などの「管理権限」を持つ。
  * **Admin/Member (write権限あり)**：リポジトリへの push/pull、Issue/PullRequest 操作が可能。開発には十分。
  * **Read-only Member**：閲覧専用。
* 現在、ユーザーは **Member (write可能)** として参加 → コード更新やPR作業は問題なし。
* 公開設定変更やメンバー追加などは **Owner に依頼が必要**。

---

## 3. リポジトリの運用方針

* **公式リポジトリ（Private）**

  * 運営より提供される。
  * 初期状態では非公開、予選発表や本番発表時点で公開される可能性あり。
* **基本操作**

  * Member 権限で push/pull、branch 作成、PR 作成・マージが可能。
  * Issue や Project board を利用して PDCA を高速に回す。
* **安全性**

  * GitHub は履歴管理があるため、AI CLI が操作しても **復元可能**。
  * 最初は branch protection（main直push禁止など）は未設定で可。必要に応じてOwner依頼。

---

## 4. AI CLI の利用可能性

* Codex CLI / ClaudeCode / Gemini CLI は GitHub の clone/push/pull 操作が可能。
* 接続方法は以下：

  * 個人アクセストークン（PAT）を発行し、CLI に設定。
  * スコープは `repo`, `workflow`, `write:packages` で十分。
* AIにコミット作業を委任 → 人間はレビュー・マージ判断に集中。

---

## 5. 今後必要となり得る「追加設定」例

Owner 権限が必須になるため、運営へ依頼が必要なケース：

1. リポジトリ公開/非公開切り替え
2. 新規メンバー追加や権限変更
3. Branch protection ルール（main保護、PR必須など）
4. GitHub Actions シークレット管理（APIキーなど）
5. 外部サービス連携（Slack通知、CI/CD強化など）

---

## 6. まとめ

* **開発は Member 権限で問題なく進行可能。**
* **管理系作業は運営（Owner）へ依頼**する必要がある。
* **AI CLI の導入は前提に組み込み済み**。GitHub 上での共同開発を基本とする。
* 本プロジェクトでは、GitHub Organization を「唯一のコードの拠点」として運用する。

---

📌 この整理を「プロジェクト前提」ファイルに格納し、今後の開発・AI活用の基本ルールとします。

---

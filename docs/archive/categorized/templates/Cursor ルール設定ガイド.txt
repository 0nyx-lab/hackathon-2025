# Cursor ルール設定ガイド

## 前提：ルールによる制御
Cursor等のローカルAIエディタの、WebでのAIサービスと比較した最大の強みのひとつは、ルールを厳密にすることで、AIを狭いスコープで個別最適化するための全権を握れること。

## ルールの種類と優先順位

Cursorでは以下の4種類のルールがサポートされており、以下の優先順位で適用されます：

1. **Userルール** - 全プロジェクトに適用（最優先）
2. **Projectルール** - 特定プロジェクトに適用
3. **AGENTS.md** - プロジェクトルートに配置可能なシンプルな代替
4. **.cursorrules** - レガシー（非推奨だが現在もサポート）

※ UserルールとProjectルールが競合する場合、Userルールが優先されます

## 【User ルール】
・プロジェクトを問わず適用されるルール
・振る舞いやパーソナリティなどを設定する

例：
```
# 全体ルール
・レスポンスの冒頭で、どのプロジェクトルールを考慮しながら作業すべきか検討し、宣言してください。
・作業が終わった際は、考慮すべきルールを遵守できているかチェックしてから終わってください。

#コーディング時の留意点
・プログラム内にコメントアウトを記入することを禁止します。
・プログラムを書いたりコマンドを実行する際には、まず関連するルールが.cursor内に存在しないかを確認してください。
```

### ユーザールール（User Rules）の編集方法
①Cursor設定から編集
設定を開く→「Rules for AI」セクションを探す→ここでユーザールールを追加・編集・削除可能。

②コマンドパレットから
コマンドパレットを開き、"Rules" と入力して関連コマンドを検索。①と同じ箇所が開き、編集可能。

## 【Project ルール】
・プロジェクトごとに適用されるルール

管理例：一般ルールを毎回必ず参照するように設定し、他ルールのハブとなるように記述。エージェントは必要に応じて他ルールを参照する。

```
.cursor/
└── rules/
    ├── general.mdc        # 一般ルール
    ├── environment.mdc    # 開発環境ルール
    ├── implementation.mdc # 実装ルール
    └── github.mdc         # GitHubルール
```

### プロジェクトルール（Project Rules）の編集方法
①.cursor/rules ディレクトリで編集（推奨）
プロジェクトルートに .cursor フォルダを作成。
その中に rules フォルダを作成。
rules フォルダ内に .mdc ファイルを作成（例：general.mdc、environment.mdc）
各ファイルにプロジェクト固有のルールを記述。

②.cursorrules ファイルで編集（非推奨）

## ルールの作成・管理方法

### 新規作成
- **コマンドパレット**: "New Cursor Rule" を実行
- **設定画面**: "Cursor Settings > Rules" から作成
- **チャット内**: "/Generate Cursor Rules" コマンドを使用

### 自動生成機能
- 既存プロジェクトからルールを自動生成可能
- プロジェクトの構造や使用言語に基づいて最適化
- コマンドパレットで "Generate Cursor Rules" を実行

## ベストプラクティス

### ルール設計の原則
- **ルールは500行未満に収める**
- **大きなルールは複数の組み合わせ可能なルールに分割する**
- **具体的な例や参照ファイルを用意し、曖昧な指示は避ける**
- **チャットで同じプロンプトを繰り返す場合、ルールを再利用する**
- **抽象的な指示だけでなく、適用対象となるコード例やファイルパスを示す**

### 効果的なルール作成のポイント
- 一つの目的に集中させ、焦点を絞った内容にする
- 複数の異なる責務を持たせず、小さなルールに分割して組み合わせる
- 「なるべく」「可能な限り」といった曖昧な文言は避け、必須事項と任意事項を明確に区別
- 同じプロジェクト内で似た指示が増えてきたら、共通化して使い回す

### パフォーマンス考慮事項
- ルールファイルが大きすぎると、AIの応答速度に影響する可能性
- コンテキストウィンドウの消費量を考慮
- 不要なルールは定期的に見直し、整理する